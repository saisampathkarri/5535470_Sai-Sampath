#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct Node {
    int val;
    struct Node* next;
} Node;

void add_edge(Node** graph, int u, int v) {
    Node* node = malloc(sizeof(Node));
    node->val = v;
    node->next = graph[u];
    graph[u] = node;
}

void dfs(int u, Node** graph, bool* visited) {
    visited[u] = true;
    Node* temp = graph[u];
    while(temp) {
        if (!visited[temp->val]) dfs(temp->val, graph, visited);
        temp = temp->next;
    }
}

long long roadsAndLibraries(int n, int c_lib, int c_road, int m, int cities[][2]) {
    if (c_lib <= c_road) return (long long)n * c_lib;

    Node* graph[n + 1];
    for(int i=0; i<=n; i++) graph[i] = NULL;
    for(int i=0; i<m; i++) {
        int u = cities[i][0], v = cities[i][1];
        add_edge(graph, u, v);
        add_edge(graph, v, u);
    }

    bool visited[n+1];
    for(int i=0; i<=n; i++) visited[i] = false;

    long long cost = 0;
    for(int i=1; i<=n; i++) {
        if(!visited[i]) {
            dfs(i, graph, visited);
            cost += c_lib;
        }
    }

    for(int i=1; i<=n; i++) visited[i] = false;
    for(int i=1; i<=n; i++) {
        if(!visited[i]) {
            int stack[n], top=0;
            stack[top++] = i;
            visited[i] = true;
            int count = 1;

            while(top > 0) {
                int u = stack[--top];
                Node* temp = graph[u];
                while(temp) {
                    int v = temp->val;
                    if(!visited[v]) {
                        visited[v] = true;
                        stack[top++] = v;
                        count++;
                    }
                    temp = temp->next;
                }
            }
            cost += (long long)(count - 1) * c_road;
        }
    }

    return cost;
}

int main() {
    int q;
    scanf("%d", &q);
    while(q--) {
        int n, m, c_lib, c_road;
        scanf("%d %d %d %d", &n, &m, &c_lib, &c_road);
        int cities[m][2];
        for(int i=0;i<m;i++) scanf("%d %d", &cities[i][0], &cities[i][1]);
        printf("%lld\n", roadsAndLibraries(n, c_lib, c_road, m, cities));
    }
    return 0;
}